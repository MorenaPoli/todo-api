diff --git a/frontend/app.js b/frontend/app.js
index 5ea1411..c87b75f 100644
--- a/frontend/app.js
+++ b/frontend/app.js
@@ -1,8 +1,260 @@
-// JavaScript for interacting with the Todo API
+/*
+ * JavaScript for interacting with the Todo API
+ *
+ * This script handles user authentication (signup/login), token storage,
+ * dynamic UI switching, and CRUD operations on tasks. It also supports
+ * additional fields such as due date, category and priority.
+ */
 
-async function fetchTasks() {
+// Global variable to store the JWT token after login
+let authToken = null;
+
+// List of category suggestions
+let categorySuggestions = [];
+
+/**
+ * Fetch categories from the backend and populate the datalist.
+ */
+async function fetchCategories() {
+  try {
+    const res = await fetch('/categories', {
+      headers: getHeaders(),
+    });
+    const data = await res.json();
+    // Combine existing and suggested categories, remove duplicates
+    const existing = data.existing_categories || [];
+    const suggested = data.suggested_categories || [];
+    categorySuggestions = Array.from(new Set([...existing, ...suggested]));
+    updateCategoryDatalist();
+  } catch (err) {
+    console.error('Failed to fetch categories:', err);
+  }
+}
+
+/**
+ * Populate the datalist element with category suggestions.
+ */
+function updateCategoryDatalist() {
+  const datalist = document.getElementById('categorySuggestions');
+  if (!datalist) return;
+  datalist.innerHTML = '';
+  categorySuggestions.forEach((cat) => {
+    const option = document.createElement('option');
+    option.value = cat;
+    datalist.appendChild(option);
+  });
+}
+
+/**
+ * Fetch statistics from the backend and display them.
+ */
+async function fetchStats() {
+  try {
+    const res = await fetch('/stats', {
+      headers: getHeaders(),
+    });
+    const data = await res.json();
+    displayStats(data);
+  } catch (err) {
+    console.error('Failed to fetch stats:', err);
+  }
+}
+
+/**
+ * Render statistics in the stats section.
+ */
+function displayStats(stats) {
+  const section = document.getElementById('statsSection');
+  if (!section) return;
+  section.innerHTML = `
+    <h3>Stats</h3>
+    <p><strong>Total tasks:</strong> ${stats.total_tasks}</p>
+    <p><strong>Completed:</strong> ${stats.completed_tasks}</p>
+    <p><strong>Pending:</strong> ${stats.pending_tasks}</p>
+    <p><strong>Overdue:</strong> ${stats.overdue_tasks}</p>
+    <p><strong>High priority pending:</strong> ${stats.high_priority_tasks}</p>
+    <p><strong>Completion rate:</strong> ${stats.completion_rate}%</p>
+  `;
+}
+
+/**
+ * Fetch dashboard metrics from the backend and display them.
+ */
+async function fetchDashboard() {
+  try {
+    const res = await fetch('/dashboard', {
+      headers: getHeaders(),
+    });
+    const data = await res.json();
+    displayDashboard(data);
+  } catch (err) {
+    console.error('Failed to fetch dashboard:', err);
+  }
+}
+
+/**
+ * Render dashboard metrics.
+ */
+function displayDashboard(data) {
+  const section = document.getElementById('dashboardSection');
+  if (!section) return;
+  // Build lists for categories and priorities
+  const topCategories = data.categories.top_categories || {};
+  const overdueByCat = data.categories.overdue_by_category || {};
+  const pendingByPriority = data.priorities.pending_by_priority || {};
+  section.innerHTML = `
+    <h3>Dashboard</h3>
+    <p><strong>Total tasks:</strong> ${data.summary.total_tasks}</p>
+    <p><strong>Completed:</strong> ${data.summary.completed_tasks}</p>
+    <p><strong>Completion rate:</strong> ${data.summary.completion_rate}%</p>
+    <p><strong>Completed this week:</strong> ${data.summary.completed_this_week}</p>
+    <h4>Top Categories</h4>
+    <ul>
+      ${Object.keys(topCategories).map((cat) => `<li>${cat}: ${topCategories[cat]}</li>`).join('')}
+    </ul>
+    <h4>Pending by Priority</h4>
+    <ul>
+      ${Object.keys(pendingByPriority).map((prio) => `<li>${prio}: ${pendingByPriority[prio]}</li>`).join('')}
+    </ul>
+    <h4>Overdue by Category</h4>
+    <ul>
+      ${Object.keys(overdueByCat).map((cat) => `<li>${cat}: ${overdueByCat[cat]}</li>`).join('')}
+    </ul>
+  `;
+}
+
+/**
+ * Enter edit mode for a task by replacing its list item with a form.
+ */
+function editTask(task, li) {
+  // Build an edit form inside the list item
+  li.innerHTML = '';
+  const form = document.createElement('form');
+  form.classList.add('edit-form');
+  form.style.display = 'flex';
+  form.style.flexDirection = 'column';
+  form.style.gap = '8px';
+  // Title
+  const titleInput = document.createElement('input');
+  titleInput.type = 'text';
+  titleInput.value = task.title;
+  // Due date
+  const dateInput = document.createElement('input');
+  dateInput.type = 'date';
+  dateInput.value = task.due_date || '';
+  // Category
+  const catInput = document.createElement('input');
+  catInput.type = 'text';
+  catInput.value = task.category || '';
+  catInput.setAttribute('list', 'categorySuggestions');
+  // Priority
+  const prioSelect = document.createElement('select');
+  ['high', 'medium', 'low'].forEach((prio) => {
+    const opt = document.createElement('option');
+    opt.value = prio;
+    opt.textContent = prio.charAt(0).toUpperCase() + prio.slice(1);
+    if (task.priority === prio) opt.selected = true;
+    prioSelect.appendChild(opt);
+  });
+  // Buttons
+  const saveBtn = document.createElement('button');
+  saveBtn.type = 'submit';
+  saveBtn.textContent = 'Save';
+  const cancelBtn = document.createElement('button');
+  cancelBtn.type = 'button';
+  cancelBtn.textContent = 'Cancel';
+  cancelBtn.addEventListener('click', (e) => {
+    e.preventDefault();
+    fetchTasks();
+  });
+  // Append fields
+  form.appendChild(titleInput);
+  form.appendChild(dateInput);
+  form.appendChild(catInput);
+  form.appendChild(prioSelect);
+  const btnContainer = document.createElement('div');
+  btnContainer.style.display = 'flex';
+  btnContainer.style.gap = '10px';
+  btnContainer.appendChild(saveBtn);
+  btnContainer.appendChild(cancelBtn);
+  form.appendChild(btnContainer);
+  // Save handler
+  form.addEventListener('submit', async (e) => {
+    e.preventDefault();
+    const newTitle = titleInput.value.trim();
+    const newDue = dateInput.value || null;
+    const newCat = catInput.value.trim() || null;
+    const newPrio = prioSelect.value;
+    try {
+      await fetch(`/tasks/${task.id}`, {
+        method: 'PUT',
+        headers: getHeaders(),
+        body: JSON.stringify({
+          title: newTitle,
+          done: task.done,
+          due_date: newDue,
+          category: newCat,
+          priority: newPrio,
+        }),
+      });
+      fetchTasks();
+    } catch (err) {
+      console.error('Failed to update task:', err);
+    }
+  });
+  li.appendChild(form);
+}
+
+/**
+ * Helper function to build request headers.
+ * Adds the Authorization header if the user is authenticated.
+ */
+function getHeaders() {
+  const headers = { 'Content-Type': 'application/json' };
+  if (authToken) {
+    headers['Authorization'] = `Bearer ${authToken}`;
+  }
+  return headers;
+}
+
+/**
+ * Show the main task UI and hide authentication forms.
+ */
+function showTaskUI() {
+  document.getElementById('authSection').style.display = 'none';
+  document.getElementById('taskForm').style.display = 'flex';
+  // Show filters and search section
+  const filterSection = document.getElementById('filterSection');
+  if (filterSection) {
+    filterSection.style.display = 'flex';
+  }
+  // Show top bar and stats section
+  const topBar = document.getElementById('topBar');
+  if (topBar) topBar.style.display = 'flex';
+  const statsSection = document.getElementById('statsSection');
+  if (statsSection) statsSection.style.display = 'block';
+
+  // Fetch categories and stats
+  fetchCategories();
+  fetchStats();
+  fetchTasks();
+}
+
+/**
+ * Fetch tasks from the API and render them on the page.
+ */
+async function fetchTasks(filterBy = '', category = '', priority = '') {
   try {
-    const response = await fetch('/tasks');
+    // Build query string based on filters
+    const params = new URLSearchParams();
+    if (filterBy) params.append('filter_by', filterBy);
+    if (category) params.append('category', category);
+    if (priority) params.append('priority', priority);
+    const queryString = params.toString();
+    const url = queryString ? `/tasks?${queryString}` : '/tasks';
+    const response = await fetch(url, {
+      headers: getHeaders(),
+    });
     const tasks = await response.json();
     renderTasks(tasks);
   } catch (err) {
@@ -10,6 +262,10 @@ async function fetchTasks() {
   }
 }
 
+/**
+ * Render the list of tasks. Includes due date, category and priority when present.
+ * Each task has buttons to toggle completion and delete it.
+ */
 function renderTasks(tasks) {
   const list = document.getElementById('taskList');
   list.innerHTML = '';
@@ -18,11 +274,22 @@ function renderTasks(tasks) {
     if (task.done) {
       li.classList.add('done');
     }
+    // Compose auxiliary info line
+    let infoParts = [];
+    if (task.due_date) infoParts.push(`Due: ${task.due_date}`);
+    if (task.category) infoParts.push(`Category: ${task.category}`);
+    if (task.priority) infoParts.push(`Priority: ${task.priority}`);
+    const infoLine = infoParts.join(' | ');
+
     li.innerHTML = `
-      <span>${task.title}</span>
-      <div>
+      <div class="task-details">
+        <span class="task-title">${task.title}</span>
+        ${infoLine ? `<small class="task-meta">${infoLine}</small>` : ''}
+      </div>
+      <div class="task-actions">
         <button class="toggle-btn">${task.done ? 'Undo' : 'Done'}</button>
         <button class="delete-btn">Delete</button>
+        <button class="edit-btn">Edit</button>
       </div>
     `;
     // Toggle button handler
@@ -30,7 +297,7 @@ function renderTasks(tasks) {
       try {
         await fetch(`/tasks/${task.id}`, {
           method: 'PUT',
-          headers: { 'Content-Type': 'application/json' },
+          headers: getHeaders(),
           body: JSON.stringify({
             title: task.title,
             done: !task.done,
@@ -49,34 +316,233 @@ function renderTasks(tasks) {
       try {
         await fetch(`/tasks/${task.id}`, {
           method: 'DELETE',
+          headers: getHeaders(),
         });
         fetchTasks();
       } catch (err) {
         console.error('Failed to delete task:', err);
       }
     });
+    // Edit button handler
+    li.querySelector('.edit-btn').addEventListener('click', () => {
+      editTask(task, li);
+    });
     list.appendChild(li);
   });
 }
 
-// Handle form submission to create a new task
+/**
+ * Handle creation of a new task.
+ * Reads input values, sends them to the API, then refreshes the task list.
+ */
 document.getElementById('taskForm').addEventListener('submit', async (e) => {
   e.preventDefault();
-  const input = document.getElementById('title');
-  const title = input.value.trim();
+  const titleInput = document.getElementById('title');
+  const dueDateInput = document.getElementById('dueDate');
+  const categoryInput = document.getElementById('category');
+  const prioritySelect = document.getElementById('priority');
+  const title = titleInput.value.trim();
+  const due_date = dueDateInput.value || null;
+  const category = categoryInput.value.trim() || null;
+  const priority = prioritySelect.value;
   if (!title) return;
   try {
     await fetch('/tasks', {
       method: 'POST',
-      headers: { 'Content-Type': 'application/json' },
-      body: JSON.stringify({ title, done: false }),
+      headers: getHeaders(),
+      body: JSON.stringify({
+        title,
+        done: false,
+        due_date,
+        category,
+        priority,
+      }),
     });
-    input.value = '';
+    // Clear the form
+    titleInput.value = '';
+    dueDateInput.value = '';
+    categoryInput.value = '';
+    prioritySelect.value = 'medium';
     fetchTasks();
   } catch (err) {
     console.error('Failed to create task:', err);
   }
 });
 
-// Initial load
-fetchTasks();
\ No newline at end of file
+/**
+ * Handle login form submission.
+ */
+document.getElementById('loginForm').addEventListener('submit', async (e) => {
+  e.preventDefault();
+  const username = document.getElementById('loginUsername').value.trim();
+  const password = document.getElementById('loginPassword').value;
+  try {
+    const res = await fetch('/auth/login', {
+      method: 'POST',
+      headers: { 'Content-Type': 'application/json' },
+      body: JSON.stringify({ username, password }),
+    });
+    if (!res.ok) {
+      throw new Error('Invalid credentials');
+    }
+    const data = await res.json();
+    authToken = data.access_token;
+    // Persist token for future sessions
+    try {
+      localStorage.setItem('authToken', authToken);
+    } catch (e) {
+      // In environments without localStorage, ignore
+    }
+    showTaskUI();
+  } catch (err) {
+    alert('Error al iniciar sesión: ' + err.message);
+  }
+});
+
+/**
+ * Handle signup form submission.
+ */
+document.getElementById('signupForm').addEventListener('submit', async (e) => {
+  e.preventDefault();
+  const username = document.getElementById('signupUsername').value.trim();
+  const password = document.getElementById('signupPassword').value;
+  try {
+    const res = await fetch('/auth/signup', {
+      method: 'POST',
+      headers: { 'Content-Type': 'application/json' },
+      body: JSON.stringify({ username, password }),
+    });
+    if (!res.ok) {
+      const error = await res.json();
+      throw new Error(error.detail || 'Error al registrarse');
+    }
+    // Auto login after successful signup
+    const loginRes = await fetch('/auth/login', {
+      method: 'POST',
+      headers: { 'Content-Type': 'application/json' },
+      body: JSON.stringify({ username, password }),
+    });
+    const loginData = await loginRes.json();
+    authToken = loginData.access_token;
+    // Persist token
+    try {
+      localStorage.setItem('authToken', authToken);
+    } catch (e) {
+      // Ignore if not available
+    }
+    showTaskUI();
+  } catch (err) {
+    alert(err.message);
+  }
+});
+
+// Toggle visibility between login and signup forms
+document.getElementById('showSignup').addEventListener('click', (e) => {
+  e.preventDefault();
+  document.getElementById('loginForm').style.display = 'none';
+  document.getElementById('signupForm').style.display = 'flex';
+});
+
+// Show login form from signup
+const showLoginLink = document.getElementById('showLogin');
+if (showLoginLink) {
+  showLoginLink.addEventListener('click', (e) => {
+    e.preventDefault();
+    document.getElementById('signupForm').style.display = 'none';
+    document.getElementById('loginForm').style.display = 'flex';
+  });
+}
+
+// On page load, check if a token is saved in localStorage (optional for persistence)
+window.addEventListener('DOMContentLoaded', () => {
+  // Retrieve token from localStorage for persistent login (if available)
+  try {
+    const savedToken = localStorage.getItem('authToken');
+    if (savedToken) {
+      authToken = savedToken;
+      showTaskUI();
+    }
+  } catch (e) {
+    // localStorage may not be available in all environments
+  }
+
+  // Set up filter and search event listeners
+  const applyBtn = document.getElementById('applyFilters');
+  if (applyBtn) {
+    applyBtn.addEventListener('click', (e) => {
+      e.preventDefault();
+      const filterBy = document.getElementById('filterBy').value;
+      const category = document.getElementById('filterCategory').value.trim();
+      const priority = document.getElementById('filterPriority').value;
+      fetchTasks(filterBy, category, priority);
+    });
+  }
+  const searchBtn = document.getElementById('searchBtn');
+  if (searchBtn) {
+    searchBtn.addEventListener('click', async (e) => {
+      e.preventDefault();
+      const query = document.getElementById('searchQuery').value.trim();
+      if (!query) {
+        // If query is empty, reset to current filters
+        const filterBy = document.getElementById('filterBy').value;
+        const category = document.getElementById('filterCategory').value.trim();
+        const priority = document.getElementById('filterPriority').value;
+        fetchTasks(filterBy, category, priority);
+        return;
+      }
+      try {
+        const url = `/search?q=${encodeURIComponent(query)}&in_title=true&in_category=true`;
+        const res = await fetch(url, {
+          headers: getHeaders(),
+        });
+        const data = await res.json();
+        // data.results contains the array of tasks
+        renderTasks(data.results);
+      } catch (err) {
+        console.error('Search failed:', err);
+      }
+    });
+  }
+
+  // Logout button
+  const logoutBtn = document.getElementById('logoutBtn');
+  if (logoutBtn) {
+    logoutBtn.addEventListener('click', (e) => {
+      e.preventDefault();
+      authToken = null;
+      try {
+        localStorage.removeItem('authToken');
+      } catch (err) {
+        // ignore
+      }
+      // Hide private sections
+      document.getElementById('taskForm').style.display = 'none';
+      document.getElementById('filterSection').style.display = 'none';
+      document.getElementById('topBar').style.display = 'none';
+      document.getElementById('statsSection').style.display = 'none';
+      document.getElementById('dashboardSection').style.display = 'none';
+      // Clear tasks list
+      document.getElementById('taskList').innerHTML = '';
+      // Show authentication
+      document.getElementById('authSection').style.display = 'block';
+      document.getElementById('loginForm').style.display = 'flex';
+      document.getElementById('signupForm').style.display = 'none';
+    });
+  }
+
+  // Dashboard toggle button
+  const dashBtn = document.getElementById('showDashboard');
+  if (dashBtn) {
+    dashBtn.addEventListener('click', async (e) => {
+      e.preventDefault();
+      const dashSection = document.getElementById('dashboardSection');
+      if (!dashSection) return;
+      if (dashSection.style.display === 'none' || dashSection.style.display === '') {
+        dashSection.style.display = 'block';
+        fetchDashboard();
+      } else {
+        dashSection.style.display = 'none';
+      }
+    });
+  }
+});
\ No newline at end of file
diff --git a/frontend/index.html b/frontend/index.html
index 880023b..d2293c9 100644
--- a/frontend/index.html
+++ b/frontend/index.html
@@ -10,15 +10,82 @@
     <div class="container">
         <div class="glass-card">
             <h1>Todo App</h1>
-            <form id="taskForm">
+            <!-- Top bar with logout button (shown after login) -->
+            <div id="topBar" style="display: none;" class="top-bar">
+                <button id="logoutBtn">Logout</button>
+            </div>
+
+            <!-- Authentication section -->
+            <div id="authSection">
+                <h2>Login</h2>
+                <form id="loginForm">
+                    <input type="text" id="loginUsername" placeholder="Username" required />
+                    <input type="password" id="loginPassword" placeholder="Password" required />
+                    <button type="submit">Login</button>
+                </form>
+                <p>
+                    ¿No tienes cuenta? <a href="#" id="showSignup">Regístrate</a>
+                </p>
+                <form id="signupForm" style="display: none;">
+                    <input type="text" id="signupUsername" placeholder="Username" required />
+                    <input type="password" id="signupPassword" placeholder="Password" required />
+                    <button type="submit">Sign up</button>
+                    <p>
+                        ¿Ya tienes cuenta? <a href="#" id="showLogin">Inicia sesión</a>
+                    </p>
+                </form>
+            </div>
+
+            <!-- New task form (hidden until logged in) -->
+            <form id="taskForm" style="display: none;">
                 <input
                     type="text"
                     id="title"
-                    placeholder="New task..."
+                    placeholder="New task title"
                     required
                 />
+                <input type="date" id="dueDate" />
+                <input type="text" id="category" placeholder="Category" list="categorySuggestions" />
+                <select id="priority">
+                    <option value="medium" selected>Medium</option>
+                    <option value="high">High</option>
+                    <option value="low">Low</option>
+                </select>
                 <button type="submit">Add</button>
             </form>
+
+            <!-- Filters and search section (shown after login) -->
+            <div id="filterSection" style="display: none;" class="filters">
+                <select id="filterBy">
+                    <option value="">All tasks</option>
+                    <option value="overdue">Overdue</option>
+                    <option value="today">Today</option>
+                    <option value="week">This week</option>
+                    <option value="completed">Completed</option>
+                    <option value="pending">Pending</option>
+                </select>
+                <input type="text" id="filterCategory" placeholder="Category" />
+                <select id="filterPriority">
+                    <option value="">All priorities</option>
+                    <option value="high">High</option>
+                    <option value="medium">Medium</option>
+                    <option value="low">Low</option>
+                </select>
+                <button id="applyFilters">Filter</button>
+                <input type="text" id="searchQuery" placeholder="Search..." />
+                <button id="searchBtn">Search</button>
+                <button id="showDashboard">Dashboard</button>
+            </div>
+
+            <!-- Stats section (populated from /stats) -->
+            <div id="statsSection" style="display: none;" class="stats"></div>
+
+            <!-- Dashboard section (optional, collapsible) -->
+            <div id="dashboardSection" style="display: none;" class="dashboard"></div>
+
+            <!-- Datalist for category suggestions -->
+            <datalist id="categorySuggestions"></datalist>
+
             <ul id="taskList"></ul>
         </div>
     </div>
diff --git a/frontend/style.css b/frontend/style.css
index 352447b..e693bb2 100644
--- a/frontend/style.css
+++ b/frontend/style.css
@@ -17,17 +17,17 @@ body {
 
 .container {
     width: 100%;
-    max-width: 500px;
+    max-width: 700px;
 }
 
 /* Glassmorphism card */
 .glass-card {
-    background: rgba(255, 255, 255, 0.25);
+    background: rgba(255, 255, 255, 0.35);
     border-radius: 16px;
     box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
     backdrop-filter: blur(10px);
     -webkit-backdrop-filter: blur(10px);
-    border: 1px solid rgba(255, 255, 255, 0.3);
+    border: 1px solid rgba(255, 255, 255, 0.5);
     padding: 30px;
     color: #000;
 }
@@ -42,6 +42,131 @@ form {
     margin-bottom: 20px;
 }
 
+/* Stack authentication forms vertically */
+#loginForm,
+#signupForm {
+    flex-direction: column;
+}
+
+#loginForm input,
+#signupForm input {
+    margin-bottom: 10px;
+}
+
+/* Display task form horizontally */
+#taskForm {
+    flex-direction: row;
+}
+
+/* Styling for task details */
+.task-details {
+    display: flex;
+    flex-direction: column;
+}
+
+.task-details .task-title {
+    font-weight: bold;
+}
+
+.task-details .task-meta {
+    font-size: 0.8rem;
+    color: #333;
+}
+
+/* Actions container */
+.task-actions {
+    display: flex;
+    gap: 10px;
+    align-items: center;
+}
+
+/* Top bar with logout */
+.top-bar {
+    display: flex;
+    justify-content: flex-end;
+    margin-bottom: 10px;
+}
+#logoutBtn {
+    padding: 8px 16px;
+    border: none;
+    border-radius: 8px;
+    background: rgba(255, 255, 255, 0.6);
+    color: #000;
+    cursor: pointer;
+    transition: background 0.2s ease;
+}
+#logoutBtn:hover {
+    background: rgba(255, 255, 255, 0.8);
+}
+
+/* Stats and dashboard containers */
+.stats, .dashboard {
+    margin-bottom: 20px;
+    padding: 15px;
+    background: rgba(255, 255, 255, 0.5);
+    border-radius: 12px;
+    color: #000;
+    font-size: 0.9rem;
+}
+.stats h3, .dashboard h3 {
+    margin-bottom: 10px;
+}
+
+/* Task list hover effect */
+#taskList li {
+    transition: background 0.2s ease, transform 0.1s ease;
+}
+#taskList li:hover {
+    background: rgba(255, 255, 255, 0.6);
+    transform: translateY(-2px);
+}
+
+/* Filters and search section */
+.filters {
+    display: flex;
+    flex-wrap: wrap;
+    gap: 10px;
+    margin-bottom: 20px;
+}
+.filters select,
+.filters input[type="text"],
+.filters button {
+    padding: 8px 12px;
+    border: none;
+    border-radius: 8px;
+    background: rgba(255, 255, 255, 0.6);
+    color: #000;
+    font-size: 0.9rem;
+}
+.filters button {
+    cursor: pointer;
+    transition: background 0.2s ease;
+}
+.filters button:hover {
+    background: rgba(255, 255, 255, 0.8);
+}
+
+/* Edit form inside task list */
+.edit-form input,
+.edit-form select {
+    padding: 8px 12px;
+    border: none;
+    border-radius: 6px;
+    font-size: 0.9rem;
+}
+.edit-form button {
+    padding: 8px 16px;
+    border: none;
+    border-radius: 6px;
+    background: rgba(255, 255, 255, 0.6);
+    color: #000;
+    cursor: pointer;
+    transition: background 0.2s ease;
+}
+.edit-form button:hover {
+    background: rgba(255, 255, 255, 0.8);
+}
+
 form input[type="text"] {
     flex: 1;
     padding: 10px 15px;
